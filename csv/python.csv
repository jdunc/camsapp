s.capitalize(), Capitalize s # 'hello' => 'Hello'
s.lower(), Lowercase s # 'HELLO' => 'hello'
s.swapcase(), Swap cases of all characters in s # 'Hello' => "hELLO"
s.title(), Titlecase s # 'hello world' => 'Hello World'
s.upper(), Uppercase s # 'hello' => 'HELLO'
s2 in s, Return true if s contains s2
s + s2, Concat s and s2
len(s), Length of s
min(s), Smallest character of s
max(s), Largest character of s
s2 not in s, Return true if s does not contain s2
s * integer, Return integer copies of s concatenated # 'hello' => 'hellohellohello'
s[index], Character at index of s
s[i:j:k], Slice of s from i to j with step k
s.count(s2), Count of s2 in s
s.center(width), Center s with blank padding of width # 'hi' => ' hi '
s.isspace(), Return true if s only contains whitespace characters
s.ljust(width), Left justifiy s with total size of width # 'hello' => 'hello '
s.rjust(width), Right justify s with total size of width # 'hello' => ' hello'
s.strip(), Remove leading and trailing whitespace from s # ' hello ' => 'hello'
s.index(s2, i, j), Index of first occurrence of s2 in s after index i and before index j
s.find(s2), Find and return lowest index of s2 in s
s.index(s2), Return lowest index of s2 in s (but raise ValueError if not found)
s.replace(s2, s3), Replace s2 with s3 in s
s.replace(s2, s3, count), Replace s2 with s3 in s at most count times
s.rfind(s2), Return highest index of s2 in s
s.rindex(s2), Return highest index of s2 in s (raise ValueError if not found)
s.casefold(), Casefold s (aggressive lowercasing for caseless matching) # 'ÃŸorat' => 'ssorat'
s.islower(), Return true if s is lowercase
s.istitle(), Return true if s is titlecased # 'Hello World' => true
s.isupper(), Return true if s is uppercase
s.endswith(s2), Return true if s ends with s2
s.isalnum(), Return true if s is alphanumeric
s.isalpha(), Return true if s is alphabetic
s.isdecimal(), Return true if s is decimal
s.isnumeric(), Return true if s is numeric
s.startswith(s2), Return true is s starts with s2
s.join('123'), Return s joined by iterable '123' # 'hello' => '1hello2hello3'
s.partition(sep), Partition string at sep and return 3-tuple with part before, the sep itself, and part after # 'hello' => ('he', 'l', 'lo')
s.rpartition(sep), Partition string at last occurrence of sep, return 3-tuple with part before, the sep, and part after # 'hello' => ('hel', 'l', 'o')
s.rsplit(sep, maxsplit), Return list of s split by sep with rightmost maxsplits performed
s.split(sep, maxsplit), Return list of s split by sep with leftmost maxsplits performed
s.splitlines(), Return a list of lines in s # 'hello\nworld' => ['hello', 'world']
s[i:j], Slice of s from i to j
s.endswith((s1, s2, s3)), Return true if s ends with any of string tuple s1, s2, and s3
s.isdigit(), Return true if s is digit
s.isidentifier(), Return true if s is a valid identifier
s.isprintable(), Return true is s is printable
s.center(width(comma) pad), Center s with padding pad of width # 'hi' => 'padpadhipadpad'
s.expandtabs(integer), Replace all tabs with spaces of tabsize integer # 'hello\tworld' => 'hello world'
s.lstrip(), Remove leading whitespace from s # ' hello ' => 'hello '
s.rstrip(), Remove trailing whitespace from s # ' hello ' => ' hello'
s.zfill(width), Left fill s with ASCII '0' digits with total length width # '42' => '00042'
., Match any character except newline
^, Match the start of the string
$, Match the end of the string
*, Match 0 or more repetitions
+, Match 1 or more repetitions
?, Match 0 or 1 repetitions
\A, Match only at start of string
\b, Match empty string, only at beginning or end of a word
\B, Match empty string, only when it is not at beginning or end of word
\d, Match digits # same as [0-9]
\D, Match any non digit # same as [^0-9]
*?, Match 0 or more repetitions non-greedy
+?, Match 1 or more repeitions non-greedy
??, Match 0 or 1 repetitions non-greedy
\, Escape special characters
[], Match a set of characters
[a-z], Match any lowercase ASCII letter
[lower-upper], Match a set of characters from lower to upper
[^], Match characters NOT in a set
A|B, Match either A or B regular expressions (non-greedy)
\s, Match whitespace characters # same as [ \t\n\r\f\v]
\S, Match non whitespace characters #same as [^ \t\n\r\f\v]
\w, Match unicode word characters # same as [a-zA-Z0-9_]
\W, Match any character not a Unicode word character # same as [^a-zA-Z0-9_]
\Z, Match only at end of string
{m}, Match exactly m copies
{m(comma)n}, Match from m to n repetitions
{(comma)n}, Match from 0 to n repetitions
{m(comma)}, Match from m to infinite repetitions
{m(comma)n}?, Match from m to n repetitions non-greedy (as few as possible)
re.compile(pattern(comma) flags), Compile a regular expression of pattern, with flags
re.match(pattern(comma) string), Match pattern only at beginning of string
re.search(pattern(comma) string), Match pattern anywhere in the string
re.split(pattern(comma) string), Split string by occurrences of patern
re.sub(pattern(comma) str2(comma) string), Replace leftmost non-overlapping occurrences of pattern in string with str2
(match), Use to specify a group for which match can be retrieved later
(?:match), Non-capturing version parenthesis (match cannot be retrieved later)
(?P<name>), Capture group with name "name"
(?P=name), Back reference group named "name" in same pattern
(?#comment), Comment
match.group("name"), Return subgroup "name" of match
match.groups(), Return tuple containing all subgroups of match
match.groupdict(), Return dict containing all named subgroups of match
match.start(group), Return start index of substring match by group
match.end(group), Return end index of substring matched by group
match.span(group), Return 2-tuple start and end indices of group in match
(?), Extension notation (used to set flags)
a, ASCII-only matching flag
i, Ignore case flag
L, Locale dependent flag
m, Multi-line flag
s, Dot matches all flag
x, Verbose flag
(?=match), Lookahead assertion - match if contents matches next, but don't consume any of the string.
(?!match), Negative lookahead assertion - match if contents do not match next
(?<=match), Positive lookbehind assertion - match if current position in string is preceded by match
(?<!match), Negative lookbehind assertion - match if current position is not preceded by match
(?(id/name)yes|no), Match "yes" pattern if id or name exists, otherwise match "no" pattern
match.pos, Value of pos which was passed to search() or match()
match.endpos, Value of endpos which was passed to search() or match()
match.lastindex, Integer index of last matched capturing group
match.lastgroup, Name of last matched capturing group
match.re, The regular expression who match() or search() created this match
match.string, The string passed to match() or search()
re.fullmatch(pattern(comma) string), Match pattern if whole string matches regular expression
re.findall(pattern(comma) string), Return all non-overlapping matches of pattern in string, as a list of strings
re.finditer(pattern(comma) string), Return an iterator yielding match objects over non-overlapping matches of pattern in string
re.subn(pattern(comma) str2(comma) string), Replace left most occurrences of pattern in string with str2, but return a tuple of (newstring, # subs made)
re.purge(), Clear the regular expression cache
