str.capitalize, Return a copy of str capitalized # "string" => "String"
str.downcase, Return a lowercase copy of str # "STRING" => "string"
str.swapcase, Return a swapped case copy of str # "String" => "sTRING"
str.upcase, Return a uppercase copy of str # "string" => "STRING"
str.end_with?(str2), Returns true if str ends with str2
str.include?(str2), Return true if str includes str2
str.index(str2), Return index of first occurrence of str2 in str
str.rindex(str2), Return the index of the last occurrence of str2 in str
str.start_with?(str2), Return true if str starts with str2
str + str2, Return a new string adding str2 to str # "one" + "two" => "onetwo"
str << str2, Modify str in place by appending str2 to the end
str[index] = str2, Replace str at index with str2
str[start(comma)length] = str2, Replace str from start to length with str2
str[regexp] = str2, Replace str using regexp with str2
str.chomp, Return a new string with carriage return characters removed from str # "hello\r\n" => "hello"
str.chop, Return a new string with last character removed from str # "string" => "strin"
str.insert(index(comma) str2), Insert str2 before the character at the given index, modifying str
str.succ, Return successor to str (increment characters starting from rightmost alphachar in string) # "abcd" => "abce"
str.prepend(str2), Prepend str2 to str
str.reverse, Return a new string with the characters from str in reverse order # "abcd" => "dcba"
str * integer, Copy - return a new String containing integer copies of str.
str[start(comma)length], Element Reference - pass a start and a length, return a substring of length characters from start
str[regexp], Element Reference - pass a Regexp and return the matching portion of the str
str[range], Element Reference - pass a range using beginning and end as offsets delimiting the substr to be returned
str.chars, Return an array of characters in str
str.chr, Return a one-character string at the beginning of str
str.lines, Return an array of lines in str
str.split(str2), Return array of substrings by dividing str based on str2
str.center(width(comma) padstr), Center str in width padded with padstr
str.ljust(length(comma) str2), Return a new string of length with str left justified and padded with str2
str.lstrip, Return a copy of str with leading whitespace removed
str.lstrip!, Modify str with leading whitespace removed
str.rjust(length(comma) str2), Return a new string of length with str right justified and padded with str2
str.rstrip, Return a copy of str with trailing whitespace removed
str.rstrip!, Modify str by removing trailing whitespace
str.strip, Return a copy of str with leading and trailing whitespace removed
str.strip!, Modify str by removing leading and trailing whitespace
str <=> str2, Compare - return -1, 0, +1 or nil depending on str is less than(comma) eq to(comma) or greater than str2
str == obj, Equality - return whether string is equal to obj
str =~ obj, Match - if obj is a Regexp, use it as a pattern to match against str(comma) and return the position.
str.eql?(str2), Return true if str is equal to str2 by length and content
str.hash, Return a hash based on str's length(comma) content(comma) and encoding
str.hex, Return number of str as hexadecimal digits
str.oct, Return octal number of str
str.to_c, Convert str to complex number
str.to_f, Convert str to float
str.to_i, Convert str to integer
str.to_r, Convert str to rational number
str.to_sym, Convert str to symbol
str.gsub(regexp(comma) str2), Return a copy of str with all occurrences of regexp substituted with str2
str.gsub(regexp(comma) other_hash), Return a copy of str with all occurrences of regexp substituted with values of matched keys in other_hash
str.gsub(str1(comma) str2), Return a copy of str with all occurrences of str1 replaced with str2
str.gsub!(str1(comma) str2), Modify str by replacing all occurrences of str1 with str2
str.index(regexp), Return index of first occurrence of regexp in str
str.match(pattern), Convert pattern to regexp and invoke its match method on str
str.partition(str2), Search str2 in str and return part before it, the match, and part after in an array
str.partition(regexp), Search regexp in str and return part before it, the match, and the part after it in an array
str.sub(regexp(comma) str2), Return copy of str with first occurrence of regexp replaced by str2
str.capitalize!, Modify str by converting the first character to uppercase and the remainder to lowercase
str.casecmp(str2), Case-insensitive compare of str with str2
str.downcase!, Modify str by replacing all uppercase letters with lowercase letters
str.swapcase!, Modify str by swapping case of all characters
str.upcase!, Modify string by replacing lowercase characters with uppercase characters
str.replace(str2), Replace the contents and taintedness of str with str2
str.rpartition(str2), Search str2 in str from end of str and return part before it(comma) the match, and part after in an array
str.scan(regexp), Return an array of strings matching regexp of str
str.sub!(regexp(comma) str2), Modify str by replacing first occurrence of regexp with str2
str.tr(from_str(comma) to_str), Return copy of str with characters in from_str replaced by characters in to_str
str.tr!(from_str(comma) to_str), Translate str in place by replacing from_str with to_str
str.tr_s(from_str(comma) to_str), Translate str replacing from_str with to_str then remove duplicate characters in translated regions
str[index], Element Reference - pass a single index, and return a substring of one character at that index
str.ascii_only?, Return true for a str which has only ASCII characters
str.count(str2), Count of str2 characters in str
str.empty?, Return true if str has a length of zero
str.encoding, Return the encoding of str
str.inspect, Return a printable version of str(comma) surrounded by quote marks(comma) with special characters escaped
str.length, Return character length of str (option 1)
str.size, Return the character length of str (option 2)
str.sum, Return a basic checksum of the characters in str
str.valid_encoding?, Returns true if str is encoded correctly
str.each_byte, Pass each byte in str to a block
str.each_char, Pass each character in str to a block
str.each_codepoint, Pass Integer ordinal of each character in str to a block
str.each_line, Pass each line of string to a block
str.upto(str2), Iterate through successive values of str(comma) starting at str and ending at str2 inclusive
str % arg, Format - use str as a format specification, and return the result of applying it to arg
str.chomp!, Modify str in place by removing carriage return characters from end of str
str.chop!, Modify str in place by removing last character
str.clear, Make str empty
str.delete(str2), Return a copy of str with all characters of str2 deleted
str.delete!(str2), Modify str by deleting all characters of str2 set
str.succ!, Modify str by incrementing characters starting from right most aphanumeric char (successor)
str.reverse!, Modify str by reversing it in place
str.scrub(char), Replace invalid bytes with given replacement char
str.squeeze, Return copy of str where runs of the same character are replaced by a single character
str.b, Return a copied string whose encoding is ASCII-8BIT
str.codepoints, Return an array of the Integer ordinals of the characters in str
str.crypt(str2), Apply a one-way cryptographic hash to str with given salt str2
str.dump, Produce a version of str with all non-printing characters replace and all special characters escaped
str.encode(str2), Return a copy of str transcoded to encoding str2
str.intern, Return symbol corresponding to str, creating the symbol if it did not previously exist
str.ord, Return integer ordinal of one-character string
str.unpack(str2), Return array of decoded str using str2 as format
str.bytes, Return an array of bytes in str
str.bytesize, Return the length of str in bytes
str.byteslice(index), Byte Reference - return a substring of one byte at index of str
str.byteslice(start(comma) length), Byte Reference - return substring from start to length of str
str.byteslice(range), Byte Reference - return substring containing bytes at offsets given by range of str
str.getbyte(index), Return the indexth byte of str as an integer
str.setbyte(index(comma) integer), Modify the indexth byte as integer
d.cwday, Return the day of calendar week of date d (1-7, Monday is 1)
d.cweek, Return the calendar week number of date d (1-53)
d.day, Return the day of the month of date d (1-31)
d.month, Return the month (1-12) of date d (option 2)
d.wday, Return the day of week of date d (0-6(comma) Sunday is zero)
d.yday, Return the day of year of date d (1-366)
d.year, Return the year of date d
d + integer, Return a date object with integer days added to date d
d - integer, Return a date object with integer days subtracted from date d
d1 - d2, Return the difference between date d1 and date d2
d << integer, Return a date object with integer months subtracted from date d
d >> integer, Return a date object with integer months added to date d
d.next, Return a date object denoting the following date of date d (option 1)
d.next_day, Date d + 1 day (long form)
d.next_month, Date d + 1 month (long form)
d.next_year, Date d + 1 year (long form)
d.prev_day, Date d - 1 day (long form)
d.prev_month, Date d - 1 month (long form)
d.prev_year, Date d - 1 year (long form)
d.succ, Return a date object denoting the following date of date d (option 2)
Date::ABBR_DAYNAMES, Array of abbreviated day names
Date::ABBR_MONTHNAMES, Array of abbreviated month names
Date::DAYNAMES, Array of full names of days of the week
Date::ENGLAND, The Julian day number of the day of calendar reform for England and her colonies
Date::GREGORIAN, The Julian day number of the day of calendar reform for the proleptic Gregorian calendar
Date::ITALY, The Julian day number of the day of calendar reform for Italy
Date::JULIAN, The Julian day number of the day of calendar reform for the proleptic Julian calendar
Date::MONTHNAMES, Array of full month names
d.to_date, Return self of date d
d.to_datetime, Convert date d to DateTime
d.to_s, Return a string of date d in ISO 8601 format
d.to_time, Convert date d to Time
d1.downto(d2), Iterate down from dates d1 to d2 one day at a time passing date to block
d1.step(d2(comma) integer), Iterate integer steps at a time from dates d1 to d2
d1.upto(d2), Iterate up from dates d1 to d2 one day at a time passing date to block
d.friday?, Return true if date d is Friday
d.monday?, Return true if the date is Monday
d.saturday?, Return true if the date is Saturday
d.sunday?, Return true if date d is Sunday
d.thursday?, Return true if date d is Thursday
d.tuesday?, Return true if date d is Tuesday
d.wednesday?, Return true if date d is Wednesday
d.inspect, Return the value as a string for inspection of date d
d.gregorian?, Return true if date d is on or after the day of calendar reform
d.julian?, Return true if date d is before the day of calendar reform
d.leap?, Return true if the year is a leap year of date d
d1 <=> d2, Compare two dates d1 and d2 and return -1, 0, 1, or nil.
d1 === d2, Return true if d1 and d2 are the same day
d.asctime, Return a string in asctime format. Equivalent to strftime('%c') (option 1)
d.ctime, Return a string in asctime format. Equivalent to strftime('%c') (option 2)
d.httpdate, Format date d as http date (equivalent to strftime('%a %d %b %Y %T GMT')
d.ajd, Return the astronomical Julian day number of date d
d.amjd, Return the astronomical modified Julian day number of date d
d.cwyear, Return the calendar week based year of date d
d.day_fraction, Return the fractional part of the day of date d
d.jd, Return the Julian day number of date d
d.mon, Return the month (1-12) of date d (option 1)
d.start, Return the Julian day number denoting the day of calendar reform
h1 == h2, Return true if h1 and h2 contain the same number of keys and if each key-value pair is equal
h[key], Element Reference - retrieve the value object corresponding to the key object of hash h
h[key] = value, Set the value of key of hash h
h.clear, Remove all key-value pairs from hash h
h.empty?, Return true if hash h contains no key-value pairs
h.length, Return the number of key-value pairs in hash h (option 1)
h.delete_if, Delete every key-value pair from hash h for which block evaluates to true
h.each, Call block once for each key in hash h(comma) passing the key-value pair as parameters (option 1)
h.each_key, Call block once for each key in hash h(comma) passing the key as a parameter
h.each_value, Call block once for each key in hash h(comma) passing the value as a parameter
h.keep_if, Delete every key-value pair from h for which block evaluates to false
h.any?, Pass each key(comma) value of hash h to a block and return true if given block ever returns a value other than false or nil.
h.each_pair, Call block once for each key in hash h(comma) passing the key-value pair as parameters (option 2)
h.reject, Return a new hash consisting of entries for which the block returns false of hash h
h.reject!, Equivalent to delete_if(comma) but return nil if no changes were made to hash h
h.select, Return a new hash consistent of entries for which the block returns true for hash h
h.select!, Equivalent to keep_if(comma) but return true if no changes were made to hash h
h.delete(key), Delete key-value pair and return value from hash h whose key is equal to key
h.has_key?(key), Return true if the given key is present in hash h (option 1)
h.include?(key), Return true if the given key is present in hash h (option 2)
h.key(value), Return the key of an occurrence of a given value in hash h
h.key?(key), Return true if the given key is present in hash h (option 3)
h.keys, Return a new array populated with the keys from hash h
h.member?(key), Return true if the given key is present in hash h (option 4)
h.default, Return default value of hash h
h.default = obj, Set default value of hash h to obj
h.default_proc, If hash h was invoked with a block(comma) return that block
h.default_proc = block, Set default proc of hash h to be executed on each failed key lookup of h
h.fetch(key), Return a value from hash h for key. Raise exception if key not found.
h.has_value?(value), Return true if the given value is present for some key in hash h (option 1)
h.value?(value), Return true if the given value is present for some key in hash h (option 2)
h.values, Return a new array populated with the values from hash h
h.values_at(key1(comma) key2), Return an array containing the values associated with the given keys key1 and key2 of hash h
h1.eql?(h2), Return true if h1 and h2 are both hashes with the same content
h.flatten, Return a new array that is a one-dimensional flattening of hash h
h.invert, Return a new hash created by using hash h's values as keys(comma) and the keys as values
h1.merge(h2), Return a new hash containing the contents of h1 and h2 (use an optional block to solve conflicts)
h1.merge!(h2), Add the contents of h2 to h1 (use an optional block to solve conflicts)
h.shift, Remove a key-value pair from hash h and return it as the two item array [key(comma)value]
h.size, Return the number of key-value pairs in hash h (option 2)
h.to_a, Convert hash h to a nested array of [key(comma)value] arrays
h.assoc(obj), Search through hash h comparing obj with each key and return the key-value pair as a two element array
h.compare_by_identity, Make hash h compare its keys by their identity (exact same objects)
h.compare_by_identity?, Return true if hash h will compare its keys by identity
h.hash, Compute a hash-code for hash h
h.to_s, Return the contents of hash h as string
h.rassoc(obj), Search through the hash comparing obj with the values of hash h. Return first k-v pair (two element array) that matches
h.rehash, Rebuild hash h based on the current hash values for each key
a[index], Element Reference - return the element at index of array a
a[n..length], Element Reference - return subarray starting at 'n' and ending at length of array a
a.fetch(index), Try to return element at position index of array a(comma) but throw IndexError if index out of bounds
a.first, Return first element of array a
a.index(obj), Find index of first obj in a where object in a == obj (option 2)
a.last, Return the last element of array a
a.sample(n), Chose a random element or n random elements from array a
a.cycle(n), Call given block for each element n times or forever if nil is given of array a
a.each, Call the given block once for each element in array a
a.each_index, Call the given block once for each element in a passing the index as param
a.map, Create a new array containing values returned by block of a (option 1)
a.reverse_each, Same as a.each(comma) but traverses a in reverse order
a << obj, Append - push obj on to the end of array a and return a
a[index] = obj, Element Assignment - set element at index to obj of array a
a1[start(comma) length] = a2, Element Assignment - replace subarray from start to length of array a1 with a2
a1.concat(a2), Appends the elements of a2 to a1
a.fill(obj), Fill array a with obj
a.fill(obj(comma) start(comma) length), Fill array a with obj from start to length
a.insert(index(comma) obj), Insert given obj before element at given index of array a
a.push(obj), Append - push given obj on to end of array a
a.unshift(obj), Prepend object to front of a(comma) moving other elements upwards
a.clear, Remove all elements from a
a.compact, Return a copy of a with all nil elements removed
a.compact!, Modify array a by removing nil elements from array a
a.delete(obj), Delete all items from array a that are equal to obj
a.delete_at(index), Delete element at index of array a(comma) returning that element(comma) or nil if index is out of range
a.drop(n), Drop first n elements from array a and return the rest of the elements in an array
a.pop, Remove the last element from array a and return it, or nil if a is empty
a.pop(n), Remove and return an array of last n elements (or less) of array a
a.shift, Remove the first element of array a and return it (shifting all other elements down by 1)
a.any?, Return true if block returns a value other than false or nil of array a
a.count, Return the number of elements of a
a.count(obj), Return the number of elements in a which equal obj
a.empty?, Return true if array a contains no elements
a1.eql?(a2), Return true if a1 and a2 are the same object or both have same content
a.frozen?, Return true if array a if frozen
a.include?(obj), Return true if given obj is present in array a
a.length, Return the number of elements in array a (may be zero)
a.size, Same as a.length
a.flatten, Return new array that is a one-dimensional flattening of a
a.join(separator), Return a string of a separated by given separator (empty string by default)
a1.replace(a2), Replace contents of a1 with a2, truncating or expanding if necessary
a.reverse, Return a new array containing a's elements in reverse order
a.rotate(count), Return a new array by rotating a so element at count if first element in new array
a.shuffle, Return a new array with elements of a shuffled
a.sort, Return a new array created by sorting array a
a.uniq, Return a new array by removing duplicate values of array a
a.delete_if, Delete every element of array a which block evaluates to true
a.drop_while, Drop elements up to, but not including(comma) the first element for which bock returns nil or false
a.keep_if, Delete every element of array a for which given block evaluates to false
a.reject, Return a new array containing the items in a for which the given block is not true
a.reject!, Equivalent to a.delete_if(comma) deleting elements from a for which the block evaluates to true(comma) but returns nil if no changes were made
a.select, Return a new array containing all elements of a for which given block returns true
a.select!, Same as a.keep_if(comma) deleting every element of array a for which given block evaluates to false
a1 & a2, Set Intersection - return a new array containing elements common to arrays a1 and a2
a * int, Return a new array built by concatenating int copies of array a
a * str, Repetition - With string arg str(comma) equivalent to a.join(str)
a1 + a2, Concatenation - return a new array by concatenating a1 and a2
a1 - a2, Difference - return a new array that is a copy of the original array a1(comma) removing any items from array a2
a1 | a2, Set Union - return a new array by joining a1 with a2(comma) excluding any duplicates
a1 <=> a2, Comparison - return -1(comma) 0(comma) or +1 if a1 is less than(comma) equal to(comma) or greater than a2
a1 == a2, Equality - return true if a1 and a2 are the same length and each element is equal to corresponding element in the other array
a.hash, Compute a hash-code for array a
a1.initialize_copy(a2), Replace contents of a1 with contents of a2(comma) truncating or expanding if necessary
a.to_s, Create string representation of array a
a.to_h, Return hash of a treating array a as array of [key(comma)value] pairs
a[range], Element Reference - return subarray specified by range of array a
a.first(n), Return first n elements of array a (option 1)
a.last(n), Return the last n elements of array a
a.rindex(obj), Return index of last object in a == obj
a.take(n), Return first n elements from array a (option 2)
a.take_while, Pass elements to block until block returns nil or false(comma) then return prior elements of a
a.values_at(i1(comma) i2(comma) i3), Return array containing elements of array a corresponding to given indices i1(comma) i2(comma) and i3
a.flatten!, Modify array a so that it is a one-dimensional flattening of itself
a.reverse!, Reverse array a in place
a.rotate!(count), Rotate a in place so element at count comes first(comma) and return a
a.shuffle!, Shuffle elements in a in place
a.sort!, Sort array a in place
a.uniq!, Remove duplicate elements from a
a.collect, Create a new array containing values returned by block of a (option 2)
a.collect!, Invoke given block once for each element of a(comma) replacing the element with the value returned by the block (option 2)
a.find_index(obj), Find index of first obj in a where object in a == obj (option 2)
a.map!, Invoke given block once for each element of a(comma) replacing the element with the value returned by the block (option 1)
a.assoc(obj), Return first contained array of a whose first element is obj
a.bsearch, Find a value in array a using binary search
a.combination(n), Return array containing all combinations of length n of a
a.permutation(n), Yield all permutation of length n of elements of array a
a.rassoc(obj), Return first contained array of a whose second element is obj
a.repeated_combination(n), Yield all repeated combinations of length n of elements in array a
a.repeated_permutation(n), Yield all repeated permutation of length n of elements in array a
a.pack(aTemplateString), Pack contents of a into binary sequence according to directives in aTemplateString
a1.product(a2(comma) a3), Return an array of all combinations of elements from a1(comma) a2(comma) and a3
a.sort_by!, Sort array a in place using set of keys generated by mapping values of a through given block
a.transpose, Transpose rows and columns of array of arrays a
a.zip, Convert any arguments to arrays, then merge elements of array a with corresponding elements from each arg
%Y, Year with century (e.g. 2015(comma) 1995(comma) etc)
%m, Month of the year(comma) zero-padded (01..12)
%B, The full month name (e.g. January)
%b, The abbreviated month name (e.g. Jan)
%d, Day of the month, zero-padded (01..31)
%j, Day of the year (001..366)
-, Don't pad a numerical output
_, Use spaced for padding
0, Use zeros for padding
^, Upcase the result string
#, Change case
:, Use colons for %z
%C, Year / 100 (round down. e.g. 20 in 2015)
%y, Year % 100 (00...99)
%_m, Month of the year(comma) blank-padded (_1..12)
%-m, Month of the year(comma) no-padding (1..12)
%^B, The full month name uppercased (e.g. JANUARY)
%^b, The abbreviated month name uppercased (e.g. JAN)
%h, Equivalent to %b (abbreviated month name)
%-d, Day of the month(comma) no-padding (1..31)
%e, Day of the month(comma) blank-padded (_1..31)
%H, Hour of the day(comma) 24-hour clock(comma) zero-padded (00..23)
%k, Hour of the day(comma) 24-hour clock(comma) blank-padded (_0..23)
%I, Hour of the day(comma) 12-hour clock(comma) zero-padded (01..12)
%l, Hour of the day(comma) 12-hour clock(comma) blank-padded (_1..12)
%P, Meridian indicator(comma) lowercase (am or pm)
%p, Meridian indicator(comma) uppercase (AM or PM)
%M, Minute of the hour (00..59)
%S, Second of the minute (00..59)
%z, Time zone as hour and minute offset from UTC (e.g. +0900)
%:z, Time zone hour and minute offset from UTC with a colon (e.g. +09:00)
%::z, Time zone hour(comma) minute and second offset from UTC (e.g. +09:00:00)
%:::z, Time zone hour(comma) minute and second offset from UTC (e.g. +09(comma) +09:30(comma) +09:30:30)
%Z, Time zone abbreviation name or something similar information
%A, The full weekday name (e.g. Sunday)
%^A, The full weekday name uppercased (e.g. SUNDAY)
%a, The abbreviated weekday name (e.g. Sun)
%^a, The abbreviated weekday name uppercased (e.g. SUN)
%u, Day of the week starting Monday (1..7)
%w, Day of the week starting Sunday (0..6)
%G, The week-based year
%g, The last 2 digits of the week-based year (00..99)
%V, Week number of the week-based year (01..53)
%U, Week number of the year. Week starts with Sunday (00..53)
%W, Week number of the year. Week starts with Monday (00..53)
%s, Number of seconds since 1970-01-01 00:00:00 UTC
%Q, Number of milliseconds since 1970-01-01 00:00:00 UTC
%n, Newline character (\n)
%t, Tab character (\t)
%%, Literal '%' character
%c, Date and time (%a %b %e %T %Y)
%D, Date (%m/%d/%y)
%F, The ISO 8601 date format (%Y-%m-%d)
%v, VMS date (%e-%b-%Y)
%x, Same as %D
%X, Same as %T
%r, 12-hour time (%I:%M:%S %p)
%R, 24-hour time (%H:%M)
%T, 24-hour time (%H:%M:%S)
%+, date(1) (%a %b %e %H:%M:%S %Z %Y)
%L, Millisecond of the second (000..999)
%N, Nanosecond (9 digits)
%3N, Millisecond (3 digits)
%6N, Microsecond (6 digits)
%12N, Picosecond (12 digits)
%15N, Femtosecond (15 digits)
%18N, Attosecond (18 digits)
%21N, Zeptosecond (21 digits)
%24N, Yoctosecond (24 digits)
